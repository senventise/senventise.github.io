{"meta":{"title":"Senventise's Bolg","subtitle":"以梦为码，莫负韶华","description":null,"author":"senventise","url":"http://senventie.com"},"pages":[{"title":"关于","date":"2019-01-13T12:26:55.089Z","updated":"2019-01-13T12:26:55.089Z","comments":true,"path":"about/index.html","permalink":"http://senventie.com/about/index.html","excerpt":"","text":"页面施工中……"}],"posts":[{"title":"机器学习笔记-1","slug":"ML-01","date":"2018-08-03T04:13:14.000Z","updated":"2019-01-13T13:03:59.894Z","comments":true,"path":"2018/08/03/ML-01/","link":"","permalink":"http://senventie.com/2018/08/03/ML-01/","excerpt":"","text":"机器学习笔记-1监督学习(Surpervised learning)在监督学习中,给定一组数据,我们知道正确的输出结果应该是什么样子,并且知道在输入和输出之间有着一个特定的关系. 回归问题(Regression)通常是预测一个值.eg.预测某个面积的房屋价格 分类问题(Classification)预测一个离散值,试图将输入变量与离散的类别对应起来.eg.预测某个大小的肿瘤是良性还是恶性有时分类问题可能会有多种输出,可能不止两种. 无监督学习(Unsupervised learning)在无监督学习中，我们基本上不知道结果会是什么样子,但我们可以通过聚类的方式从数据中提取一个特殊的结构.在无监督学习中给定的数据是和监督学习中给定的数据是不一样的.在无监督学习中给定的数据没有任何标签.eg.Google News 会自动将网上的新闻分类,例如XX油井发生火灾的分类里面的页面都是互联网上关于这场火灾的报道. 线性回归模型(Linear regression)$ h_\\theta(x)=\\theta_0+\\theta_1x $(单变量线性回归)h即为假设(hypothess),是拟合的函数. 代价函数(Cost function)/平方误差函数(Square error function)$$ J(\\theta_0,\\theta_1)=\\frac{1}{2m}\\sum^{m}{i=1}(h\\theta(x^i)-y^i)^2 $$","categories":[{"name":"技术","slug":"tech","permalink":"http://senventie.com/categories/tech/"}],"tags":[]},{"title":"记安装 kali 遇到的坑","slug":"problems-with-kali-linux-installation","date":"2018-07-09T04:13:14.000Z","updated":"2019-01-13T13:02:51.384Z","comments":true,"path":"2018/07/09/problems-with-kali-linux-installation/","link":"","permalink":"http://senventie.com/2018/07/09/problems-with-kali-linux-installation/","excerpt":"","text":"emmmm因为一些机缘巧合进入了交通大学网络空间安全工作站，既来之则安之，今天在安装kali时遇到了一些问题，遂记之。 问题1：系统安装时出现错误这个问题是在图形引导安装系统时出现的，使用搜索引擎发现是因为在VMwAre分配的空间太小，于是重新安装，分配了20G空间，问题解决。 问题2：没有网络连接编辑虚拟机设置–&gt;网络适配器–&gt;桥接模式,解决。 问题3：安装VMware tools时提示只读文件系统原因：cdrom是只读的，解压时要加上 -C /目录 解压到指定目录。 总结：善用搜索引擎！","categories":[{"name":"技术","slug":"tech","permalink":"http://senventie.com/categories/tech/"}],"tags":[{"name":"网络安全","slug":"CyberSecurity","permalink":"http://senventie.com/tags/CyberSecurity/"}]},{"title":"浅谈泛型","slug":"2018-6-1-talking-about-the-generic","date":"2018-06-01T04:13:14.000Z","updated":"2019-01-13T13:01:38.610Z","comments":true,"path":"2018/06/01/2018-6-1-talking-about-the-generic/","link":"","permalink":"http://senventie.com/2018/06/01/2018-6-1-talking-about-the-generic/","excerpt":"","text":"浅谈泛型什么是泛型？ &emsp;&emsp;泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。参数不可以是原始数据类型 例如:12345678910111213141516171819202122232425262728293031class Gen&lt;T&gt; &#123; private T ob; //定义泛型成员变量 public Gen(T ob)&#123; this.ob = ob; &#125; public T getOb()&#123; return ob; &#125; public void setOb(T ob)&#123; this.ob = ob; &#125; public void showType()&#123; System.out.println(\"T的实际类型是: \" + ob.getClass().getName()); &#125;&#125;public class GenDemo &#123; public static void main(String[] args) &#123; //定义泛型类Gen的一个Integer版本 Gen&lt;Integer&gt; intOb = new Gen&lt;Integer&gt;(88); intOb.showType(); int i = intOb.getOb(); System.out.println(\"value= \" + i); System.out.println(\"----------------------------------\"); //定义泛型类Gen的一个String版本 Gen&lt;String&gt; strOb = new Gen&lt;String&gt;(\"Hello Gen!\"); strOb.showType(); String s = strOb.getOb(); System.out.println(\"value= \" + s); &#125;&#125; 泛型类 泛型类型用于类的定义中，被称为泛型类。通过泛型可以完成对一组类的操作对外开放相同的接口。最典型的就是各种容器类，如：List、Set、Map。 e.g.1234567891011121314//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型//在实例化泛型类时，必须指定T的具体类型public class Generic&lt;T&gt;&#123;//key这个成员变量的类型为T,T的类型由外部指定 private T key; public Generic(T key) &#123; //泛型构造方法形参key的类型也为T，T的类型由外部指定 this.key = key; &#125; public T getKey()&#123; //泛型方法getKey的返回值类型为T，T的类型由外部指定 return key; &#125;&#125; 泛型方法泛型方法，是在调用方法的时候指明泛型的具体类型。e.g.12345678//定义泛型方法public &lt;T&gt; T getObject(Class&lt;T&gt; c)&#123; T t = c.newInstance(); return t;Generic generic = new Generic();//调用泛型方法Object obj=generic.getObject(Class.forName(\"com.test.test\")) &emsp;&emsp;说明一下，定义泛型方法时，必须在返回值前边加一个，来声明这是一个泛型方法，持有一个泛型T，然后才可以用泛型T作为方法的返回值. &emsp;&emsp;Class的作用就是指明泛型的具体类型，而Class类型的变量c，可以用来创建泛型类的对象。 &emsp;&emsp;为什么要用变量c来创建对象呢？既然是泛型方法，就代表着我们不知道具体的类型是什么，也不知道构造方法如何，因此没有办法去new一个对象，但可以利用变量c的newInstance方法去创建对象，也就是利用反射创建对象。 &emsp;&emsp;泛型方法要求的参数是Class类型，而Class.forName()方法的返回值也是Class，因此可以用Class.forName()作为参数。其中，forName()方法中的参数是何种类型，返回的Class就是何种类型。在本例中，forName()方法中传入的是User类的完整路径，因此返回的是Class类型的对象，因此调用泛型方法时，变量c的类型就是Class，因此泛型方法中的泛型T就被指明为User，因此变量obj的类型为User。 &emsp;&emsp;当然，泛型方法不是仅仅可以有一个参数Class，可以根据需要添加其他参数。 &emsp;&emsp;为什么要使用泛型方法呢？因为泛型类要在实例化的时候就指明类型，如果想换一种类型，不得不重新new一次，可能不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活。 文中部分内容出处","categories":[{"name":"技术","slug":"tech","permalink":"http://senventie.com/categories/tech/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://senventie.com/tags/Java/"}]},{"title":"第一篇博客！","slug":"2018-5-28-My-first-blog","date":"2018-05-28T04:13:14.000Z","updated":"2019-01-13T13:00:44.873Z","comments":true,"path":"2018/05/28/2018-5-28-My-first-blog/","link":"","permalink":"http://senventie.com/2018/05/28/2018-5-28-My-first-blog/","excerpt":"","text":"My first blog here!Written by vim on termux,without Chinese input method support. 5/27/2018 21:58","categories":[{"name":"生活","slug":"life","permalink":"http://senventie.com/categories/life/"}],"tags":[]}]}